# -*- coding: utf8 -*-



"""
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

思路：
第 i 阶可以由以下两种方法得到：
在第 (i−1) 阶后向上爬一阶
在第 (i−2) 阶后向上爬2阶
所以到达第 i 阶的方法总数就是到第 (i−1) 阶和第 (i−2) 阶的方法数之和。

因为在
设：能上到 (i - 1)有a种办法，能上到(i - 2)有b种办法

(i -1)阶，只有一种办法上到 (i), 所以经过 (i - 1) 上 (i) 有 a 种办法

( i - 2)阶，经过(i - 2)上(i)有，两种方法，分别是走两个1步，和走一个2步，
但是走两个1步会经过(i - 1), 这种情况上面已经算过了，所以也只剩下一种走2步的情况，
所以经过(i - 2)但是不经过(i - 1)有b种情况

所以 (i) = a + b
即f(n) = f(n-1)+f(n-2)
"""

class Solution(object):
    def climb_stairs(self, n):
        """
        斐波拉切序列法
        :type n: int
        :rtype: int
        """
        i,a,b = 0,0,1
        while i < n:
            a,b = b,b+a
            i += 1
        return b


if __name__ == '__main__':
    n=4
    slt = Solution()
    slt.climb_stairs(n)
