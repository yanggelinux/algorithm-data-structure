# -*- coding: utf8 -*-
"""
颠倒给定的 32 位无符号整数的二进制位。

 

示例 1：

输入: 00000010100101000001111010011100
输出: 00111001011110000010100101000000
解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
示例 2：

输入：11111111111111111111111111111101
输出：10111111111111111111111111111111
解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
"""
class Solution(object):
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        res = bin(n)[2:]  # 将n转换成2进制形式，并且去除前缀0b
        res = res.zfill(32)  # 在二进制左侧填充0，使得长度为32位
        res = res[::-1]  # 反转二进制
        return int(res, base=2)  # 将二进制转换为整数


if __name__ == '__main__':
    slt = Solution()
    n = 20
    slt.reverseBits(n)